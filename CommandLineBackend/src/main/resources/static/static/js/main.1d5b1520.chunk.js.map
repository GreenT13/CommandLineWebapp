{"version":3,"sources":["components/command.jsx","App.js","index.js"],"names":["Command","state","commandPromise","response","executeCommand","commandArgs","window","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","_this2","this","props","then","json","jsonResponse","setState","callback","react_default","a","createElement","className","readOnly","value","Component","App","commands","inputValue","isMostRecentCommandFinished","handleKeyDown","e","key","console","log","_this","push","setMostRecentCommandFinished","inputDiv","id","autoFocus","onKeyDown","onChange","evt","updateInputValue","map","command","index","command_Command","target","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"iNAEqBA,oNACjBC,MAAQ,CACJC,eAAgB,KAChBC,SAAU,QAYdC,eAAiB,SAACC,GACd,OAAOC,OAAOC,MAAM,WAAY,CAC5BC,OAAQ,OACRC,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBT,YAAeA,0FAjBP,IAAAU,EAAAC,KAChBA,KAAKZ,eAAeY,KAAKC,MAAMZ,aAC1Ba,KAAK,SAAAf,GAAQ,OAAIA,EAASgB,SAC1BD,KAAK,SAAAE,GACFL,EAAKM,SAAS,CAAClB,SAAUiB,EAAajB,WACtCY,EAAKE,MAAMK,8CAmBnB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,qBACAH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UAAUC,UAAQ,EAACC,MAAOZ,KAAKC,MAAMZ,gBAI9DkB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAiBV,KAAKf,MAAME,kBAvCpB0B,cCsEtBC,oNAjEX7B,MAAQ,CACJ8B,SAAU,GACVC,WAAY,GACZC,6BAA6B,KAOjCC,cAAgB,SAACC,GACC,UAAVA,EAAEC,MACFC,QAAQC,IAAI,YACZC,EAAKtC,MAAM8B,SAASS,KAAKD,EAAKtC,MAAM+B,YACpCO,EAAKlB,SAAS,CACVU,SAAUQ,EAAKtC,MAAM8B,SACrBC,WAAY,GACZC,6BAA6B,QAKzCQ,6BAA+B,WAC3BF,EAAKlB,SAAS,CAACY,6BAA6B,6EAGvC,IACDS,EADC3B,EAAAC,KAYL,OATI0B,EADA1B,KAAKf,MAAMgC,4BAEPV,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,aAAajB,UAAU,cAC3BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,qBACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UAAUkB,WAAS,EAACC,UAAW7B,KAAKkB,cAC9CN,MAAOZ,KAAKf,MAAM+B,WAAYc,SAAU,SAAAC,GAAG,OAAIhC,EAAKiC,iBAAiBD,QAG9ExB,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,aAAajB,UAAU,eAG1CH,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,aACJpB,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,wUASJF,EAAAC,EAAAC,cAAA,cACKT,KAAKf,MAAM8B,SAASkB,IAAI,SAACC,EAASC,GAAV,OACrB5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAShB,IAAKe,EAAO9C,YAAa6C,EAAS5B,SAAUP,EAAK0B,kCAGjEC,4CAKIK,GACb/B,KAAKK,SAAS,CAACW,WAAYe,EAAIM,OAAOzB,eA9D5BC,oBCDlByB,IAASC,OACPhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.1d5b1520.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class Command extends Component {\r\n    state = {\r\n        commandPromise: null,\r\n        response: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.executeCommand(this.props.commandArgs)\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                this.setState({response: jsonResponse.response});\r\n                this.props.callback();\r\n            });\r\n    }\r\n\r\n    executeCommand = (commandArgs) => {\r\n        return window.fetch('/command', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"commandArgs\": commandArgs\r\n            })\r\n        })\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"input-line line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div>\r\n                        <input className=\"cmdline\" readOnly value={this.props.commandArgs}/>\r\n                    </div>\r\n\r\n                </div>\r\n                <p className=\"preformatted\">{ this.state.response }</p>\r\n            </div>\r\n        );\r\n    };\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Command from './components/command'\r\nimport 'whatwg-fetch'\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        commands: [],\r\n        inputValue: '',\r\n        isMostRecentCommandFinished: true\r\n    };\r\n\r\n    /**\r\n     * Handle the event when a key is pressed.\r\n     * @param e\r\n     */\r\n    handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            console.log('Entered!');\r\n            this.state.commands.push(this.state.inputValue);\r\n            this.setState({\r\n                commands: this.state.commands,\r\n                inputValue: '',\r\n                isMostRecentCommandFinished: false\r\n            })\r\n        }\r\n    };\r\n\r\n    setMostRecentCommandFinished = () => {\r\n        this.setState({isMostRecentCommandFinished: true})\r\n    };\r\n\r\n    render() {\r\n        let inputDiv;\r\n        if (this.state.isMostRecentCommandFinished) {\r\n            inputDiv =\r\n                <div id=\"input-line\" className=\"input-line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div><input className=\"cmdline\" autoFocus onKeyDown={this.handleKeyDown}\r\n                                value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)}/></div>\r\n                </div>\r\n        } else {\r\n            inputDiv = <div id=\"input-line\" className=\"input-line\"/>\r\n        }\r\n        return (\r\n            <div id=\"container\">\r\n                <output>\r\n                    <pre>{`  .   ____          _            __ _ _\r\n /\\\\\\\\ / ___'_ __ _ _(_)_ __  __ _ \\\\ \\\\ \\\\ \\\\\r\n( ( )\\\\___ | '_ | '_| | '_ \\\\/ _\\` | \\\\ \\\\ \\\\ \\\\\r\n \\\\\\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\r\n  '  |____| .__|_| |_|_| |_\\\\__, | / / / /\r\n =========|_|==============|___/=/_/_/_/\r\n :: Spring Boot ::        (v2.1.6.RELEASE)`}\r\n                    </pre>\r\n                </output>\r\n                <output>\r\n                    {this.state.commands.map((command, index) => (\r\n                        <Command key={index} commandArgs={command} callback={this.setMostRecentCommandFinished}/>\r\n                    ))}\r\n                </output>\r\n                {inputDiv}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({inputValue: evt.target.value});\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}