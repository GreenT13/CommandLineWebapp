{"version":3,"sources":["components/MyWebSocketComponent.jsx","components/CommandOutput.jsx","components/Banner.jsx","App.js","index.js"],"names":["MyWebSocketComponent","determineURL","port","window","location","hostname","protocol","includes","initialize","_this","setState","connected","webSocket","WebSocket","onopen","handleWsOnOpen","onmessage","handleWsOnMessage","onclose","handleWsOnClose","onerror","handleWsOnError","message","console","log","function","props","onConnectedCallback","commandOutput","data","JSON","parse","commandStatus","onMessageCallback","onFinalCallback","onDisconnectedCallback","setTimeout","sendWsMessage","state","send","this","React","Component","CommandOutput","react_default","a","createElement","className","readOnly","value","command","commandArg","output","Banner","releaseVersion","tsRelease","_this2","fetch","then","response","ok","json","Error","catch","error","App","commands","isMostRecentCommandFinished","isConnectionEstablished","inputValue","sendMessage","input","fileBase64","push","myWebSocketComponent","stringify","onMessage","mostRecentCommand","length","onFinal","onConnected","onDisconnected","handleKeyDown","e","key","startsWith","openFileUpload","myInput","click","setUploadedFile","uploadedFile","reader","FileReader","readAsDataURL","target","files","onload","result","setMyWebSocketComponent","setMyInput","inputDiv","id","autoFocus","onKeyDown","onChange","evt","updateInputValue","MyWebSocketComponent_MyWebSocketComponent","ref","type","file","style","display","Banner_Banner","map","index","CommandOutput_CommandOutput","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.81a6bdcf.chunk.js","sourcesContent":["import React from 'react';\r\n/**\r\n * Class for communicating with the backend.\r\n * This class calls the proper callbacks when needed.\r\n */\r\nexport default class MyWebSocketComponent extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.initialize();\r\n    }\r\n\r\n    determineURL = () => {\r\n        // Because of issues with local development proxy stuff, we need to manually put this port here.\r\n        let port;\r\n        if (window.location.hostname === 'localhost') {\r\n            port = 8080;\r\n        } else {\r\n            port = window.location.port;\r\n        }\r\n\r\n        let protocol;\r\n        if (window.location.protocol.includes('https')) {\r\n            protocol = \"wss\";\r\n        } else {\r\n            protocol = \"ws\";\r\n        }\r\n\r\n        return protocol + \"://\" + window.location.hostname + \":\" + port + \"/webSocket\";\r\n    };\r\n\r\n    initialize = () => {\r\n        this.setState({\r\n            connected: false\r\n        });\r\n\r\n        let webSocket = new WebSocket(this.determineURL());\r\n\r\n        webSocket.onopen = this.handleWsOnOpen;\r\n        webSocket.onmessage = this.handleWsOnMessage;\r\n        webSocket.onclose = this.handleWsOnClose;\r\n        webSocket.onerror = this.handleWsOnError;\r\n\r\n        this.setState({\r\n            webSocket: webSocket,\r\n        });\r\n    };\r\n\r\n    handleWsOnOpen = (message) => {\r\n        console.log({function: 'handleWsOnOpen', message: message});\r\n\r\n        this.setState({\r\n            connected: true\r\n        });\r\n        this.props.onConnectedCallback();\r\n    };\r\n\r\n    handleWsOnMessage = (commandOutput) => {\r\n        let data = JSON.parse(commandOutput.data);\r\n        let message = data.message;\r\n        let commandStatus = data.commandStatus;\r\n\r\n        if (commandStatus === 'MESSAGE') {\r\n            this.props.onMessageCallback(message);\r\n        } else if (commandStatus === 'FINAL') {\r\n            this.props.onFinalCallback(message);\r\n        }\r\n    };\r\n\r\n    handleWsOnClose = (message) => {\r\n        console.log({function: 'handleWsOnClose', message: message});\r\n        this.props.onDisconnectedCallback();\r\n\r\n        // The onClose method will be called every time after initialize failed.\r\n        // Thus we can just retry after 1 second, meaning it will be an infinite loop until it connects.\r\n        this.setState({\r\n            connected: false\r\n        });\r\n        setTimeout(this.initialize, 1000);\r\n    };\r\n\r\n    handleWsOnError = (message) => {\r\n        console.log({function: 'handleWsOnError', message: message});\r\n    };\r\n\r\n    sendWsMessage = (message) => {\r\n        this.state.webSocket.send(message);\r\n    };\r\n\r\n    render() {\r\n        // TODO: Add the file input type here, and only trigger upload-file from this place (so app isn't clouded).\r\n        // Or make some in-between class that handles it. Maybe rethink the structure anyway?\r\n        return null;\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class CommandOutput extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"input-line line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div className=\"cmdline-wrapper\">\r\n                        <input className=\"cmdline\" readOnly value={this.props.command.commandArg}/>\r\n                    </div>\r\n\r\n                </div>\r\n                <p className=\"preformatted\">{ this.props.command.output }</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Banner extends React.Component {\r\n\r\n    // Choose different base values from the backend.\r\n    state = {\r\n        releaseVersion: 'vY',\r\n        tsRelease: '0001-01-01T00:00:00Z'\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Get version from the backend.\r\n        fetch('version')\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error('Something went wrong');\r\n                }\r\n            })\r\n            .then((data) => {\r\n                this.setState({\r\n                    releaseVersion: data.releaseVersion,\r\n                    tsRelease: data.tsRelease\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log('An error occured when retrieving the version.');\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <pre>\r\n                    {` ______ ______ ______ ______ ______ ______ ______ ______ ______ \r\n|______|______|______|______|______|______|______|______|______|\r\n______   _              ___                       ______        \r\n| ___ \\\\ (_)            / _ \\\\                      \\\\ \\\\ \\\\ \\\\ \r\n| |_/ /  _  ___ ___   / /_\\\\ \\\\  _ __   ___  _ __    \\\\ \\\\ \\\\ \\\\\r\n|    /  | |/ __/ _ \\\\  |  _  | | '_ \\\\ / _ \\\\| '_ \\\\    > > > > \r\n| |\\\\ \\\\  | | (_| (_) | | | | | | |_) | (_) | | | |  / / / /    \r\n\\\\_| \\\\_| |_|\\\\___\\\\___/  \\\\_| |_/ | .__/ \\\\___/|_| |_| /_/_/_/\r\n ______ ______ ______ ______ ______  \r\n|______|______|______|______|______| ` + this.state.releaseVersion + ' on ' + this.state.tsRelease}\r\n                </pre>\r\n                <br/>\r\n                <pre>If this is your first time here, typ 'help'!</pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport MyWebSocketComponent from \"./components/MyWebSocketComponent\";\r\nimport CommandOutput from \"./components/CommandOutput\";\r\nimport Banner from \"./components/Banner\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        commands: [],\r\n        isMostRecentCommandFinished: true,\r\n        isConnectionEstablished: false,\r\n        inputValue: ''\r\n    };\r\n\r\n    sendMessage = (input, fileBase64) => {\r\n        // Update state with new command.\r\n        this.state.commands.push({\r\n            commandArg: input,\r\n            output: \"\"\r\n        });\r\n        this.setState({\r\n            isMostRecentCommandFinished: false,\r\n            commands: this.state.commands\r\n        });\r\n\r\n        // Send the message.\r\n        this.myWebSocketComponent.sendWsMessage(JSON.stringify({commandArg: input, fileBase64: fileBase64}));\r\n\r\n        // Clear the input\r\n        this.setState({\r\n            inputValue: '',\r\n        })\r\n\r\n    };\r\n\r\n    onMessage = (message) => {\r\n        // Update the output of the most recent command.\r\n        this.setState(state => {\r\n            const commands = state.commands;\r\n            const mostRecentCommand = commands[commands.length - 1];\r\n            mostRecentCommand.output = mostRecentCommand.output + message + \"\\n\";\r\n\r\n            return {\r\n                commands,\r\n            };\r\n        });\r\n    };\r\n\r\n    onFinal = (message) => {\r\n        if (message) {\r\n            this.onMessage(message);\r\n        }\r\n        this.setState({\r\n            isMostRecentCommandFinished: true\r\n        });\r\n    };\r\n\r\n    onConnected = () => {\r\n        this.setState({\r\n            isConnectionEstablished: true\r\n        });\r\n    };\r\n\r\n    onDisconnected = () => {\r\n        this.setState({\r\n            isConnectionEstablished: false\r\n        });\r\n    };\r\n\r\n    handleKeyDown = (e) => {\r\n        // Possibilities for more cool stuff:\r\n        // https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript\r\n        if (e.key === 'Enter') {\r\n            // If we typed the \"upload-plugin\" command, we first upload a file and then send the command.\r\n            // Else, we just execute the command.\r\n            if (this.state.inputValue.startsWith('upload-plugin')) {\r\n                // The command will be executed whenever a file has been uploaded.\r\n                this.openFileUpload();\r\n            } else {\r\n                this.sendMessage(this.state.inputValue, null);\r\n            }\r\n        }\r\n    };\r\n\r\n    openFileUpload = () => {\r\n        this.myInput.click();\r\n    };\r\n\r\n    setUploadedFile = (uploadedFile) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(uploadedFile.target.files[0]);\r\n        reader.onload = () => {\r\n            this.sendMessage(this.state.inputValue, reader.result);\r\n        };\r\n        reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n        };\r\n\r\n    };\r\n\r\n    render() {\r\n        let inputDiv;\r\n\r\n        if (!this.state.isConnectionEstablished) {\r\n            inputDiv = <div id=\"reconnect\">No connection to the server. Trying to connect to the server...</div>\r\n        } else if (this.state.isMostRecentCommandFinished) {\r\n            inputDiv =\r\n                <div id=\"input-line\" className=\"input-line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div className=\"cmdline-wrapper\"><input className=\"cmdline\" autoFocus onKeyDown={this.handleKeyDown}\r\n                                                            value={this.state.inputValue}\r\n                                                            onChange={evt => this.updateInputValue(evt)}/></div>\r\n                </div>\r\n        } else {\r\n            inputDiv = <div id=\"input-line\" className=\"input-line\"/>\r\n        }\r\n\r\n        return (\r\n            <div id=\"container\">\r\n                <MyWebSocketComponent ref={this.setMyWebSocketComponent}\r\n                                      onMessageCallback={this.onMessage}\r\n                                      onFinalCallback={this.onFinal}\r\n                                      onConnectedCallback={this.onConnected}\r\n                                      onDisconnectedCallback={this.onDisconnected}/>\r\n\r\n                <input id=\"fileUploader\" type=\"file\" ref={this.setMyInput}\r\n                       onChange={file => this.setUploadedFile(file)}\r\n                       style={{display: 'none'}}/>\r\n\r\n                <output>\r\n                    <Banner/>\r\n                    <br/>\r\n                </output>\r\n                <output>\r\n                    {this.state.commands.map((command, index) => (\r\n                        <CommandOutput key={index} command={command}/>\r\n                    ))}\r\n                </output>\r\n\r\n                {inputDiv}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setMyWebSocketComponent = (myWebSocketComponent) => {\r\n        this.myWebSocketComponent = myWebSocketComponent;\r\n    };\r\n\r\n    setMyInput = (myInput) => {\r\n        this.myInput = myInput;\r\n    };\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({inputValue: evt.target.value});\r\n    };\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}