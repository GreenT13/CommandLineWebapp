{"version":3,"sources":["components/MyWebSocketComponent.jsx","components/CommandOutput.jsx","components/Banner.jsx","App.js","index.js"],"names":["MyWebSocketComponent","determineURL","port","window","location","hostname","protocol","includes","initialize","webSocket","WebSocket","_this","onopen","handleWsOnOpen","onmessage","handleWsOnMessage","onclose","handleWsOnClose","onerror","handleWsOnError","setState","message","connected","props","onConnectedCallback","commandOutput","data","JSON","parse","commandStatus","onMessageCallback","onFinalCallback","onDisconnectedCallback","setTimeout","console","log","sendWsMessage","state","send","this","React","Component","CommandOutput","react_default","a","createElement","className","readOnly","value","command","commandArg","output","Banner","releaseVersion","tsRelease","_this2","fetch","then","response","ok","json","Error","catch","error","App","commands","isMostRecentCommandFinished","isConnectionEstablished","inputValue","sendMessage","input","push","myWebSocketComponent","stringify","onMessage","mostRecentCommand","length","onFinal","onConnected","onDisconnected","handleKeyDown","e","key","setMyWebSocketComponent","inputDiv","id","autoFocus","onKeyDown","onChange","evt","updateInputValue","MyWebSocketComponent_MyWebSocketComponent","ref","Banner_Banner","map","index","CommandOutput_CommandOutput","target","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.360ca165.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Class for communicating with the backend.\r\n * This class calls the proper callbacks when needed.\r\n */\r\nexport default class MyWebSocketComponent extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            connected: false\r\n        });\r\n        this.initialize();\r\n    }\r\n\r\n    determineURL = () => {\r\n        // Because of issues with local development proxy stuff, we need to manually put this port here.\r\n        let port;\r\n        if (window.location.hostname === 'localhost') {\r\n            port = 8080;\r\n        } else {\r\n            port = window.location.port;\r\n        }\r\n\r\n        let protocol;\r\n        if (window.location.protocol.includes('https')) {\r\n            protocol = \"wss\";\r\n        } else {\r\n            protocol = \"ws\";\r\n        }\r\n\r\n        return protocol + \"://\" + window.location.hostname + \":\" + port + \"/webSocket\";\r\n    };\r\n\r\n    initialize = () => {\r\n        let webSocket = new WebSocket(this.determineURL());\r\n\r\n        webSocket.onopen = this.handleWsOnOpen;\r\n        webSocket.onmessage = this.handleWsOnMessage;\r\n        webSocket.onclose = this.handleWsOnClose;\r\n        webSocket.onerror = this.handleWsOnError;\r\n\r\n        this.setState({\r\n            webSocket: webSocket,\r\n        });\r\n    };\r\n\r\n    handleWsOnOpen = (message) => {\r\n        this.setState({\r\n            connected: true\r\n        });\r\n\r\n        this.props.onConnectedCallback();\r\n    };\r\n\r\n    handleWsOnMessage = (commandOutput) => {\r\n        let data = JSON.parse(commandOutput.data);\r\n        let message = data.message;\r\n        let commandStatus = data.commandStatus;\r\n\r\n        if (commandStatus === 'MESSAGE') {\r\n            this.props.onMessageCallback(message);\r\n        } else if (commandStatus === 'FINAL') {\r\n            this.props.onFinalCallback(message);\r\n        }\r\n    };\r\n\r\n    handleWsOnClose = (message) => {\r\n        this.props.onDisconnectedCallback();\r\n\r\n        // The onClose method will be called every time after initialize failed.\r\n        // Thus we can just retry after 1 second, meaning it will be an infinite loop until it connects.\r\n        this.setState({\r\n            connected: false\r\n        });\r\n        setTimeout(this.initialize, 1000);\r\n    };\r\n\r\n    handleWsOnError = (message) => {\r\n        console.log(\"Error happened.\");\r\n        console.log(message);\r\n    };\r\n\r\n    sendWsMessage = (message) => {\r\n        this.state.webSocket.send(message);\r\n    };\r\n\r\n    render() {\r\n        return (null);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class CommandOutput extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"input-line line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div className=\"cmdline-wrapper\">\r\n                        <input className=\"cmdline\" readOnly value={this.props.command.commandArg}/>\r\n                    </div>\r\n\r\n                </div>\r\n                <p className=\"preformatted\">{ this.props.command.output }</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Banner extends React.Component {\r\n\r\n    // Choose different base values from the backend.\r\n    state = {\r\n        releaseVersion: 'vY',\r\n        tsRelease: '0001-01-01T00:00:00Z'\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Get version from the backend.\r\n        fetch('version')\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error('Something went wrong');\r\n                }\r\n            })\r\n            .then((data) => {\r\n                this.setState({\r\n                    releaseVersion: data.releaseVersion,\r\n                    tsRelease: data.tsRelease\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log('An error occured when retrieving the version.');\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <pre>\r\n                    {` ______ ______ ______ ______ ______ ______ ______ ______ ______ \r\n|______|______|______|______|______|______|______|______|______|\r\n______   _              ___                       ______        \r\n| ___ \\\\ (_)            / _ \\\\                      \\\\ \\\\ \\\\ \\\\ \r\n| |_/ /  _  ___ ___   / /_\\\\ \\\\  _ __   ___  _ __    \\\\ \\\\ \\\\ \\\\\r\n|    /  | |/ __/ _ \\\\  |  _  | | '_ \\\\ / _ \\\\| '_ \\\\    > > > > \r\n| |\\\\ \\\\  | | (_| (_) | | | | | | |_) | (_) | | | |  / / / /    \r\n\\\\_| \\\\_| |_|\\\\___\\\\___/  \\\\_| |_/ | .__/ \\\\___/|_| |_| /_/_/_/\r\n ______ ______ ______ ______ ______  \r\n|______|______|______|______|______| ` + this.state.releaseVersion + ' on ' + this.state.tsRelease}\r\n                </pre>\r\n                <br/>\r\n                <pre>If this is your first time here, typ 'help'!</pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport MyWebSocketComponent from \"./components/MyWebSocketComponent\";\r\nimport CommandOutput from \"./components/CommandOutput\";\r\nimport Banner from \"./components/Banner\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        commands: [],\r\n        isMostRecentCommandFinished: true,\r\n        isConnectionEstablished: false,\r\n        inputValue: ''\r\n    };\r\n\r\n    sendMessage = (input) => {\r\n        // Update state with new command.\r\n        this.state.commands.push({\r\n            commandArg: input,\r\n            output: \"\"\r\n        });\r\n        this.setState({\r\n            isMostRecentCommandFinished: false,\r\n            commands: this.state.commands\r\n        });\r\n\r\n        // Send the message.\r\n        this.myWebSocketComponent.sendWsMessage(JSON.stringify({commandArg: input}));\r\n    };\r\n\r\n    onMessage = (message) => {\r\n        // Update the output of the most recent command.\r\n        this.setState(state => {\r\n            const commands = state.commands;\r\n            const mostRecentCommand = commands[commands.length - 1];\r\n            mostRecentCommand.output = mostRecentCommand.output + message + \"\\n\";\r\n\r\n            return {\r\n                commands,\r\n            };\r\n        });\r\n    };\r\n\r\n    onFinal = (message) => {\r\n        if (message) {\r\n            this.onMessage(message);\r\n        }\r\n        this.setState({\r\n            isMostRecentCommandFinished: true\r\n        });\r\n    };\r\n\r\n    onConnected = () => {\r\n        this.setState({\r\n            isConnectionEstablished: true\r\n        });\r\n    };\r\n\r\n    onDisconnected = () => {\r\n        this.setState({\r\n            isConnectionEstablished: false\r\n        });\r\n    };\r\n\r\n    handleKeyDown = (e) => {\r\n        // Possibilities for more cool stuff:\r\n        // https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript\r\n        if (e.key === 'Enter') {\r\n            this.sendMessage(this.state.inputValue);\r\n\r\n            // Clear the input\r\n            this.setState({\r\n                inputValue: '',\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let inputDiv;\r\n\r\n        if (!this.state.isConnectionEstablished) {\r\n            inputDiv = <div id=\"reconnect\">No connection to the server. Trying to connect to the server...</div>\r\n        } else if (this.state.isMostRecentCommandFinished) {\r\n            inputDiv =\r\n                <div id=\"input-line\" className=\"input-line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div className=\"cmdline-wrapper\"><input className=\"cmdline\" autoFocus onKeyDown={this.handleKeyDown}\r\n                                value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} /></div>\r\n                </div>\r\n        } else {\r\n            inputDiv = <div id=\"input-line\" className=\"input-line\" />\r\n        }\r\n\r\n        return (\r\n            <div id=\"container\">\r\n                <MyWebSocketComponent ref={this.setMyWebSocketComponent}\r\n                                      onMessageCallback={this.onMessage}\r\n                                      onFinalCallback={this.onFinal}\r\n                                      onConnectedCallback={this.onConnected}\r\n                                      onDisconnectedCallback={this.onDisconnected}/>\r\n                <output>\r\n                    <Banner />\r\n                    <br />\r\n                </output>\r\n                <output>\r\n                    {this.state.commands.map((command, index) => (\r\n                        <CommandOutput key={index} command={command}/>\r\n                    ))}\r\n                </output>\r\n\r\n                { inputDiv }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setMyWebSocketComponent = (myWebSocketComponent) => {\r\n        this.myWebSocketComponent = myWebSocketComponent;\r\n    };\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({inputValue: evt.target.value});\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}