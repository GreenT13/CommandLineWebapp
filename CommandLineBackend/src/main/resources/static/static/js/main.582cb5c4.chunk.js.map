{"version":3,"sources":["components/MyWebSocketComponent.jsx","components/CommandOutput.jsx","components/Banner.jsx","App.js","index.js"],"names":["MyWebSocketComponent","determineURL","port","console","log","window","location","hostname","protocol","initialize","webSocket","WebSocket","_this","onopen","handleWsOnOpen","onmessage","handleWsOnMessage","onclose","handleWsOnClose","onerror","handleWsOnError","setState","message","connected","props","onConnectedCallback","commandOutput","data","JSON","parse","commandStatus","onMessageCallback","onFinalCallback","onDisconnectedCallback","setTimeout","sendWsMessage","state","send","this","React","Component","CommandOutput","react_default","a","createElement","className","readOnly","value","command","commandArg","output","Banner","releaseVersion","tsRelease","_this2","fetch","then","response","ok","json","Error","catch","error","App","commands","isMostRecentCommandFinished","isConnectionEstablished","inputValue","sendMessage","input","push","myWebSocketComponent","stringify","onMessage","mostRecentCommand","length","onFinal","onConnected","onDisconnected","handleKeyDown","e","key","setMyWebSocketComponent","inputDiv","id","autoFocus","onKeyDown","onChange","evt","updateInputValue","MyWebSocketComponent_MyWebSocketComponent","ref","Banner_Banner","map","index","CommandOutput_CommandOutput","target","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.582cb5c4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Class for communicating with the backend.\r\n * This class calls the proper callbacks when needed.\r\n */\r\nexport default class MyWebSocketComponent extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            connected: false\r\n        });\r\n        this.initialize();\r\n    }\r\n\r\n    determineURL = () => {\r\n        // Added this for heroku debugging purposes.\r\n        console.log(window.location);\r\n\r\n        // Because of issues with local development proxy stuff, we need to manually put this port here.\r\n        let port;\r\n        if (window.location.hostname === 'localhost') {\r\n            port = 8080;\r\n        } else {\r\n            port = window.location.port;\r\n        }\r\n\r\n        let protocol;\r\n        if (window.location.protocol === 'https') {\r\n            protocol = \"wss\";\r\n        } else {\r\n            protocol = \"ws\";\r\n        }\r\n\r\n        return protocol + \"://\" + window.location.hostname + \":\" + port + \"/webSocket\";\r\n    };\r\n\r\n    initialize = () => {\r\n        let webSocket = new WebSocket(this.determineURL());\r\n\r\n        webSocket.onopen = this.handleWsOnOpen;\r\n        webSocket.onmessage = this.handleWsOnMessage;\r\n        webSocket.onclose = this.handleWsOnClose;\r\n        webSocket.onerror = this.handleWsOnError;\r\n\r\n        this.setState({\r\n            webSocket: webSocket,\r\n        });\r\n    };\r\n\r\n    handleWsOnOpen = (message) => {\r\n        this.setState({\r\n            connected: true\r\n        });\r\n\r\n        this.props.onConnectedCallback();\r\n    };\r\n\r\n    handleWsOnMessage = (commandOutput) => {\r\n        let data = JSON.parse(commandOutput.data);\r\n        let message = data.message;\r\n        let commandStatus = data.commandStatus;\r\n\r\n        this.props.onMessageCallback(message);\r\n\r\n        if (commandStatus === 'FINAL') {\r\n            this.props.onFinalCallback();\r\n        }\r\n    };\r\n\r\n    handleWsOnClose = (message) => {\r\n        this.props.onDisconnectedCallback();\r\n\r\n        // The onClose method will be called every time after initialize failed.\r\n        // Thus we can just retry after 1 second, meaning it will be an infinite loop until it connects.\r\n        this.setState({\r\n            connected: false\r\n        });\r\n        setTimeout(this.initialize, 1000);\r\n    };\r\n\r\n    handleWsOnError = (message) => {\r\n        console.log(\"Error happened.\");\r\n        console.log(message);\r\n    };\r\n\r\n    sendWsMessage = (message) => {\r\n        this.state.webSocket.send(message);\r\n    };\r\n\r\n    render() {\r\n        return (null);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class CommandOutput extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"input-line line\">\r\n                    <div className=\"prompt\">[rapon@website] #</div>\r\n                    <div>\r\n                        <input className=\"cmdline\" readOnly value={this.props.command.commandArg}/>\r\n                    </div>\r\n\r\n                </div>\r\n                <p className=\"preformatted\">{ this.props.command.output }</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Banner extends React.Component {\r\n\r\n    // Choose different base values from the backend.\r\n    state = {\r\n        releaseVersion: 'vY',\r\n        tsRelease: '0001-01-01T00:00:00Z'\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Get version from the backend.\r\n        fetch('version')\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error('Something went wrong');\r\n                }\r\n            })\r\n            .then((data) => {\r\n                this.setState({\r\n                    releaseVersion: data.releaseVersion,\r\n                    tsRelease: data.tsRelease\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log('An error occured when retrieving the version.');\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <pre>\r\n                {` ______ ______ ______ ______ ______ ______ ______ ______ ______ \r\n|______|______|______|______|______|______|______|______|______|\r\n______   _              ___                       ______        \r\n| ___ \\\\ (_)            / _ \\\\                      \\\\ \\\\ \\\\ \\\\ \r\n| |_/ /  _  ___ ___   / /_\\\\ \\\\  _ __   ___  _ __    \\\\ \\\\ \\\\ \\\\\r\n|    /  | |/ __/ _ \\\\  |  _  | | '_ \\\\ / _ \\\\| '_ \\\\    > > > > \r\n| |\\\\ \\\\  | | (_| (_) | | | | | | |_) | (_) | | | |  / / / /    \r\n\\\\_| \\\\_| |_|\\\\___\\\\___/  \\\\_| |_/ | .__/ \\\\___/|_| |_| /_/_/_/\r\n ______ ______ ______ ______ ______  \r\n|______|______|______|______|______| ` + this.state.releaseVersion + ' on ' + this.state.tsRelease}\r\n            </pre>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\nimport React from 'react';\nimport MyWebSocketComponent from \"./components/MyWebSocketComponent\";\nimport CommandOutput from \"./components/CommandOutput\";\nimport Banner from \"./components/Banner\";\n\nclass App extends React.Component {\n    state = {\n        commands: [],\n        isMostRecentCommandFinished: true,\n        isConnectionEstablished: false,\n        inputValue: ''\n    };\n\n    sendMessage = (input) => {\n        // Update state with new command.\n        this.state.commands.push({\n            commandArg: input,\n            output: \"\"\n        });\n        this.setState({\n            isMostRecentCommandFinished: false,\n            commands: this.state.commands\n        });\n\n        // Send the message.\n        this.myWebSocketComponent.sendWsMessage(JSON.stringify({commandArg: input}));\n    };\n\n    onMessage = (message) => {\n        // Update the output of the most recent command.\n        this.setState(state => {\n            const commands = state.commands;\n            const mostRecentCommand = commands[commands.length - 1];\n            mostRecentCommand.output = mostRecentCommand.output + message + \"\\n\";\n\n            return {\n                commands,\n            };\n        });\n    };\n\n    onFinal = () => {\n        this.setState({\n            isMostRecentCommandFinished: true\n        });\n    };\n\n    onConnected = () => {\n        this.setState({\n            isConnectionEstablished: true\n        });\n    };\n\n    onDisconnected = () => {\n        this.setState({\n            isConnectionEstablished: false\n        });\n    };\n\n    handleKeyDown = (e) => {\n        // Possibilities for more cool stuff:\n        // https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript\n        if (e.key === 'Enter') {\n            this.sendMessage(this.state.inputValue);\n\n            // Clear the input\n            this.setState({\n                inputValue: '',\n            })\n        }\n    };\n\n    render() {\n        let inputDiv;\n\n        if (!this.state.isConnectionEstablished) {\n            inputDiv = <div id=\"reconnect\">No connection to the server. Trying to connect to the server...</div>\n        } else if (this.state.isMostRecentCommandFinished) {\n            inputDiv =\n                <div id=\"input-line\" className=\"input-line\">\n                    <div className=\"prompt\">[rapon@website] #</div>\n                    <div className=\"cmdline-wrapper\"><input className=\"cmdline\" autoFocus onKeyDown={this.handleKeyDown}\n                                value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} /></div>\n                </div>\n        } else {\n            inputDiv = <div id=\"input-line\" className=\"input-line\" />\n        }\n\n        return (\n            <div id=\"container\">\n                <MyWebSocketComponent ref={this.setMyWebSocketComponent}\n                                      onMessageCallback={this.onMessage}\n                                      onFinalCallback={this.onFinal}\n                                      onConnectedCallback={this.onConnected}\n                                      onDisconnectedCallback={this.onDisconnected}/>\n                <output>\n                    <Banner />\n                    <br />\n                </output>\n                <output>\n                    {this.state.commands.map((command, index) => (\n                        <CommandOutput key={index} command={command}/>\n                    ))}\n                </output>\n\n                { inputDiv }\n            </div>\n        );\n    }\n\n    setMyWebSocketComponent = (myWebSocketComponent) => {\n        this.myWebSocketComponent = myWebSocketComponent;\n    };\n\n    updateInputValue(evt) {\n        this.setState({inputValue: evt.target.value});\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}